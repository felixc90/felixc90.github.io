/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 ./public/models/university.glb -o ./src/models/University.tsx -t --shadows 
*/

import * as THREE from 'three'
import React, { JSX, useEffect, useRef, useState } from 'react'
import { useGLTF } from '@react-three/drei'
import GrassMesh from './GrassMesh';


export function Model(props: JSX.IntrinsicElements['group']) {
  const { scene } = useGLTF('models/map.glb');
	const map = useRef<THREE.Object3D>(null);
	const [grassMeshes, setGrassMeshes] = useState<THREE.Mesh[]>([]);
  useEffect(() => {
    const foundGrassMeshes: THREE.Mesh[] = []

    scene.traverse((child) => {
      if (child instanceof THREE.Mesh && child.name.startsWith('grass_')) {
        console.log('Found grass:', child)
        foundGrassMeshes.push(child)
				console.log(child)
      }
    })

    setGrassMeshes(foundGrassMeshes)
  }, [scene])

	return (
		<group>
			<primitive
				{...props}
				ref={map}
				object={ scene }
			/>
			{grassMeshes.map((mesh) => (
        <GrassMesh key={mesh.uuid} surfaceMesh={mesh} />
      ))}
		</group>
	)
}

useGLTF.preload('models/map.glb')
