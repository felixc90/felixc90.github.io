/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 ./public/models/university.glb -o ./src/models/University.tsx -t --shadows 
*/

import * as THREE from 'three'
import React, { useEffect, useRef } from 'react'
import { shaderMaterial, useGLTF, useKeyboardControls } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import { useFrame } from '@react-three/fiber'
import { Controls, Color } from 'three';
import { GhibliShader } from '../components/GhibliShader'
import ghibliFragmentShader from '../components/shaders/ghibli.frag';
import ghibliVertexShader from '../components/shaders/ghibli.vert';

type GLTFResult = GLTF & {
  nodes: {
    Plane: THREE.Mesh
    Cube001: THREE.Mesh
    roof1002: THREE.Mesh
    Cube002: THREE.Mesh
    roof1003: THREE.Mesh
    Cube003: THREE.Mesh
    Cube029: THREE.Mesh
    Cube030: THREE.Mesh
    window001: THREE.Mesh
    window002: THREE.Mesh
    Cube042: THREE.Mesh
    Cylinder019: THREE.Mesh
    Cylinder020: THREE.Mesh
    Cylinder021: THREE.Mesh
    Cylinder022: THREE.Mesh
    Cylinder023: THREE.Mesh
    Cylinder024: THREE.Mesh
    Cube031: THREE.Mesh
    Cylinder025: THREE.Mesh
    Cube032: THREE.Mesh
    Cube034: THREE.Mesh
    Cube035: THREE.Mesh
    Cube036: THREE.Mesh
    Cube033: THREE.Mesh
    Cube037: THREE.Mesh
    Cube038: THREE.Mesh
    Cube039: THREE.Mesh
    Cube040: THREE.Mesh
    Text: THREE.Mesh
    Cube041: THREE.Mesh
    Plane009: THREE.Mesh
    Cube043: THREE.Mesh
    Cube044: THREE.Mesh
    Cube045: THREE.Mesh
    Cube046: THREE.Mesh
    Cube047: THREE.Mesh
    Cube048: THREE.Mesh
    Cube009: THREE.Mesh
    Cube010: THREE.Mesh
    Cube011: THREE.Mesh
    Cube012: THREE.Mesh
    Cube013: THREE.Mesh
    Cube014: THREE.Mesh
    Cube015: THREE.Mesh
    Cube016: THREE.Mesh
    Cylinder031: THREE.Mesh
    Cylinder032: THREE.Mesh
    Cube017: THREE.Mesh
    Cube018: THREE.Mesh
    Cube019: THREE.Mesh
    Cube020: THREE.Mesh
    Cube021: THREE.Mesh
    Cube022: THREE.Mesh
    Cube023: THREE.Mesh
    Cylinder033: THREE.Mesh
    Cylinder034: THREE.Mesh
    Cube024: THREE.Mesh
    Cube025: THREE.Mesh
    Cube026: THREE.Mesh
    Cube027: THREE.Mesh
    Cylinder042: THREE.Mesh
    Cube028: THREE.Mesh
    Plane007: THREE.Mesh
    Plane008: THREE.Mesh
    lightrail: THREE.Mesh
  }
  materials: {
    ['university-base']: THREE.MeshStandardMaterial
    ['aw-bottom']: THREE.MeshStandardMaterial
    ['aw-cream']: THREE.MeshStandardMaterial
    ['aw-top']: THREE.MeshStandardMaterial
    ['aw-trim']: THREE.MeshStandardMaterial
    ['aw-border']: THREE.MeshStandardMaterial
    ['aw-window1']: THREE.MeshStandardMaterial
    ['aw-window2']: THREE.MeshStandardMaterial
    ['aw-window3']: THREE.MeshStandardMaterial
    ['aw-text']: THREE.MeshStandardMaterial
    ['aw-grey']: THREE.MeshStandardMaterial
    ['rc-body.002']: THREE.MeshStandardMaterial
    ['rc-window']: THREE.MeshStandardMaterial
    ['rc-roof']: THREE.MeshStandardMaterial
    ['rc-roof1']: THREE.MeshStandardMaterial
    ['rc-white']: THREE.MeshStandardMaterial
    ['rc-white']: THREE.MeshStandardMaterial
    ['rc-metallic']: THREE.MeshStandardMaterial
    ['rc-sidewindow']: THREE.MeshStandardMaterial
    ['rc-metallic']: THREE.MeshStandardMaterial
    ['rc-roof-metallic']: THREE.MeshStandardMaterial
    ['rc-black-solar']: THREE.MeshPhysicalMaterial
    ['rc-door']: THREE.MeshStandardMaterial
    ['lr-red']: THREE.MeshStandardMaterial
  }
  animations: GLTFAction[]
}

export function Model(props: JSX.IntrinsicElements['group']) {
  const { nodes, materials } = useGLTF('models/university.glb') as GLTFResult;

	const groupRef = useRef<THREE.Group>(null);	
	function toGhibliPalette(color: THREE.Color): THREE.Color {
  const hsl = { h: 0, s: 0, l: 0 };
  color.getHSL(hsl);

  // Modify the HSL values to match Ghibli's style
  hsl.s *= 0.4;              // Desaturate significantly
  hsl.l = 0.5 + (hsl.l - 0.5) * 0.6; // Slightly soften highlights/shadows

  // Optional: gently round hue to nearby "pleasant" hues
  // (Ghibli often avoids neon reds and blues)
  if (hsl.h > 0.9 || hsl.h < 0.05) hsl.h = 0.02; // Bias reds to warm brown-red
  else if (hsl.h > 0.55 && hsl.h < 0.7) hsl.h = 0.6; // Push strong blues to cyan

  const ghibliColor = new THREE.Color();
  ghibliColor.setHSL(hsl.h, hsl.s, hsl.l);
  return ghibliColor;
}
	function getDarkerShades(color: THREE.Color) {
		const factors = [1, 0.75, 0.5, 0.25]; // 25%, 50%, 75% darker
		const res = factors.map(factor => new THREE.Color(color).multiplyScalar(factor));
		console.log(res);
		return res;
	}

	useEffect(() => {
		groupRef.current?.traverse((children) => {
			if (children instanceof THREE.Mesh) {
				const color = children.material.color;
				if (color) {
						children.material = new THREE.ShaderMaterial({
							vertexShader: ghibliVertexShader,
							fragmentShader: ghibliFragmentShader,
							uniforms: {
								colorMap: { value: getDarkerShades(toGhibliPalette(color)).map(
									color => color.convertLinearToSRGB()
								) },
								brightnessThresholds: { value: [0.9, 0.45, 0.001] },
								lightPosition: { value: new THREE.Vector3(5, 15, 5) },
							}
						});
				}
				
			}
		});
	}, [groupRef])

	return (
    <group {...props} dispose={null} ref={groupRef}>
      <mesh geometry={nodes.Plane.geometry} material={materials['university-base']} position={[-8, 0, 0]} scale={[32, 16, 16]} />
      <mesh geometry={nodes.Cube001.geometry} material={materials['aw-bottom']} position={[-9.26, 0, -8]} scale={[3, 0.9, 2]} />
      <mesh geometry={nodes.roof1002.geometry} material={materials['aw-cream']} position={[-9.26, 1.65, -8]} scale={[0.9, 0.038, 0.6]} />
      <mesh geometry={nodes.Cube002.geometry} material={materials['aw-top']} position={[-9.26, 1.95, -8]} scale={[3, 2, 2]} />
      <mesh geometry={nodes.roof1003.geometry} material={materials['aw-cream']} position={[-9.26, 5.8, -8]} scale={[0.9, 0.038, 0.6]} />
      <mesh geometry={nodes.Cube003.geometry} material={materials['aw-trim']} position={[-9.26, 1.4, -8]} />
      <mesh geometry={nodes.Cube029.geometry} material={materials['aw-trim']} position={[-9.26, 0.2, -8]} />
      <mesh geometry={nodes.Cube030.geometry} material={materials['aw-trim']} position={[-9.26, 0.4, -8]} />
      <mesh geometry={nodes.window001.geometry} material={materials['aw-border']} position={[-11.21, 0.65, -5.95]} rotation={[0, 0, -Math.PI]} scale={[-0.643, -0.301, -0.1]} />
      <mesh geometry={nodes.window002.geometry} material={materials['aw-window1']} position={[-11.21, 0.65, -5.95]} rotation={[0, 0, -Math.PI]} scale={[-0.643, -0.301, -0.1]} />
      <mesh geometry={nodes.Cube042.geometry} material={materials['aw-cream']} position={[-9.41, 1.95, -5.958]} scale={[0.775, 2, 0.03]} />
      <mesh geometry={nodes.Cylinder019.geometry} material={materials['aw-bottom']} position={[-7.078, 1.48, -7.138]} scale={[1.353, 0.15, 2.977]} />
      <mesh geometry={nodes.Cylinder020.geometry} material={materials['aw-trim']} position={[-7.078, 0.2, -7.138]} scale={[1.407, 0.04, 3.083]} />
      <mesh geometry={nodes.Cylinder021.geometry} material={materials['aw-trim']} position={[-7.078, 0.4, -7.138]} scale={[1.407, 0.04, 3.083]} />
      <mesh geometry={nodes.Cylinder022.geometry} material={materials['aw-trim']} position={[-7.078, 1.4, -7.138]} scale={[1.407, 0.04, 3.083]} />
      <mesh geometry={nodes.Cylinder023.geometry} material={materials['aw-bottom']} position={[-7.078, 0, -7.138]} scale={[1.353, 0.2, 2.977]} />
      <mesh geometry={nodes.Cylinder024.geometry} material={materials['aw-window2']} position={[-7.078, 0.48, -7.138]} scale={[1.353, 0.5, 2.923]} />
      <mesh geometry={nodes.Cube031.geometry} material={materials['aw-trim']} position={[-8.348, 0, -5.997]} rotation={[0, -0.611, 0]} scale={[0.03, 0.9, 0.025]} />
      <mesh geometry={nodes.Cylinder025.geometry} material={materials['aw-trim']} position={[-7.078, 1, -7.138]} scale={[1.407, 0.025, 3.083]} />
      <mesh geometry={nodes.Cube032.geometry} material={materials['aw-window3']} position={[-8.279, 0.48, -6.02]} scale={[0.04, 0.5, 0.025]} />
      <mesh geometry={nodes.Cube034.geometry} material={materials['aw-trim']} position={[-6.209, 0.48, -5.737]} rotation={[0, Math.PI / 9, 0]} scale={[0.03, 0.7, 0.025]} />
      <mesh geometry={nodes.Cube035.geometry} material={materials['aw-trim']} position={[-5.825, 0.48, -5.998]} rotation={[0, 1.222, 0]} scale={[0.03, 0.7, 0.025]} />
      <mesh geometry={nodes.Cube036.geometry} material={materials['aw-trim']} position={[-6.208, 0.48, -8.536]} rotation={[-Math.PI, 0.305, -Math.PI]} scale={[0.03, 0.7, 0.025]} />
      <mesh geometry={nodes.Cube033.geometry} material={materials['aw-trim']} position={[-7.947, 0.48, -5.738]} rotation={[0, -Math.PI / 9, 0]} scale={[0.03, 0.7, 0.025]} />
      <mesh geometry={nodes.Cube037.geometry} material={materials['aw-trim']} position={[-7.628, 0.48, -5.738]} scale={[0.03, 0.5, 0.025]} />
      <mesh geometry={nodes.Cube038.geometry} material={materials['aw-trim']} position={[-6.528, 0.48, -5.738]} scale={[0.03, 0.5, 0.025]} />
      <mesh geometry={nodes.Cube039.geometry} material={materials['aw-trim']} position={[-5.818, 0, -6.512]} rotation={[0, Math.PI / 2, 0]} scale={[0.03, 0.9, 0.025]} />
      <mesh geometry={nodes.Cube040.geometry} material={materials['aw-trim']} position={[-5.818, 0, -7.612]} rotation={[0, Math.PI / 2, 0]} scale={[0.03, 0.9, 0.025]} />
      <mesh geometry={nodes.Text.geometry} material={materials['aw-text']} position={[-7.421, 1.161, -5.746]} rotation={[Math.PI / 2, 0, 0]} />
      <mesh geometry={nodes.Cube041.geometry} material={materials['aw-border']} position={[-9.41, 0, -5.996]} scale={[0.65, 0.775, 0.1]} />
      <mesh geometry={nodes.Plane009.geometry} material={materials['aw-window1']} position={[-9.41, 0.7, -5.932]} rotation={[Math.PI / 2, 0, 0]} scale={[0.5, 1, 0.7]} />
      <mesh geometry={nodes.Cube043.geometry} material={materials['aw-cream']} position={[-11.204, 1.95, -9.28]} scale={[0.5, 2, 1]} />
      <mesh geometry={nodes.Cube044.geometry} material={materials['aw-grey']} position={[-11.204, 1.95, -9.28]} scale={[0.5, 2, 1]} />
      <mesh geometry={nodes.Cube045.geometry} material={materials['aw-window1']} position={[-11.204, 1.95, -9.28]} scale={[0.5, 2, 1]} />
      <mesh geometry={nodes.Cube046.geometry} material={materials['aw-cream']} position={[-7.619, 1.95, -9.28]} scale={[0.5, 2, 1]} />
      <mesh geometry={nodes.Cube047.geometry} material={materials['aw-grey']} position={[-7.619, 1.95, -9.28]} scale={[0.5, 2, 1]} />
      <mesh geometry={nodes.Cube048.geometry} material={materials['aw-window1']} position={[-7.619, 1.95, -9.28]} scale={[0.5, 2, 1]} />
      <mesh geometry={nodes.Cube009.geometry} material={materials['rc-body.002']} position={[0.663, 0, -6.912]} scale={[4, 1.5, 1]} />
      <mesh geometry={nodes.Cube010.geometry} material={materials['rc-window']} position={[0.663, 0, -6.912]} scale={[4, 1.5, 1]} />
      <mesh geometry={nodes.Cube011.geometry} material={materials['rc-window']} position={[0.663, 0, -6.912]} />
      <mesh geometry={nodes.Cube012.geometry} material={materials['rc-window']} position={[0.663, 0, -6.912]} scale={[4, 1.5, 1]} />
      <mesh geometry={nodes.Cube013.geometry} material={materials['rc-window']} position={[0.663, 0, -6.912]} scale={[4, 1.5, 1]} />
      <mesh geometry={nodes.Cube014.geometry} material={materials['rc-roof']} position={[-1.837, 0, -7.412]} scale={[1, 0.675, 0.5]} />
      <mesh geometry={nodes.Cube015.geometry} material={materials['rc-roof']} position={[0.663, 0, -6.912]} scale={[4, 1.5, 1]} />
      <mesh geometry={nodes.Cube016.geometry} material={materials['rc-roof1']} position={[0.663, 3, -6.912]} scale={0.999} />
      <mesh geometry={nodes.Cylinder031.geometry} material={materials['rc-roof']} position={[-1.587, 0, -6.312]} scale={[4, 9.2, 4]} />
      <mesh geometry={nodes.Cylinder032.geometry} material={materials['rc-roof']} position={[-2.587, 0, -6.312]} scale={[4, 9.2, 4]} />
      <mesh geometry={nodes.Cube017.geometry} material={materials['rc-roof']} position={[-1.587, 1.15, -6.912]} scale={[0.3, 0.1, 1]} />
      <mesh geometry={nodes.Cube018.geometry} material={materials['rc-roof']} position={[-2.587, 1.15, -6.912]} scale={[0.3, 0.1, 1]} />
      <mesh geometry={nodes.Cube019.geometry} material={materials['rc-white']} position={[-2.337, 1.65, -6.037]} scale={[0.038, 0.075, 0.025]} />
      <mesh geometry={nodes.Cube020.geometry} material={materials['rc-white']} position={[3.038, 1.65, -6.037]} scale={[0.038, 0.075, 0.025]} />
      <mesh geometry={nodes.Cube021.geometry} material={materials['rc-white']} position={[3.038, 0.6, -6.037]} scale={[0.038, 0.075, 0.025]} />
      <mesh geometry={nodes.Cube022.geometry} material={materials['rc-white']} position={[0.939, 0.6, -6.037]} scale={[0.038, 0.075, 0.025]} />
      <mesh geometry={nodes.Cube023.geometry} material={materials['rc-white']} position={[0.663, 0, -6.912]} />
      <mesh geometry={nodes.Cylinder033.geometry} material={materials['rc-roof']} position={[-3.737, 0, -8.278]} rotation={[0, Math.PI / 2, 0]} scale={[4, 10.8, 4]} />
      <mesh geometry={nodes.Cylinder034.geometry} material={materials['rc-roof']} position={[-3.737, 0, -7.278]} rotation={[0, Math.PI / 2, 0]} scale={[1, 0.675, 1]} />
      <mesh geometry={nodes.Cube024.geometry} material={materials['rc-metallic']} position={[-3.187, 1.35, -7.912]} scale={[1, 0.182, 1]} />
      <mesh geometry={nodes.Cube025.geometry} material={materials['rc-sidewindow']} position={[-3.187, 1.65, -7.912]} scale={[0.9, 1, 0.9]} />
      <mesh geometry={nodes.Cube026.geometry} material={nodes.Cube026.material} position={[-3.132, 1.846, -7.912]} scale={[0.95, 0.025, 1]} />
      <mesh geometry={nodes.Cube027.geometry} material={materials['rc-metallic']} position={[2.35, 3, -6.736]} scale={[24, 4, 6]} />
      <mesh geometry={nodes.Cylinder042.geometry} material={materials['rc-roof-metallic']} position={[1.054, 3, -7.221]} scale={[0.15, 1.25, 0.15]} />
      <mesh geometry={nodes.Cube028.geometry} material={materials['rc-black-solar']} position={[2.35, 3.035, -6.711]} scale={[21.397, 3.566, 5.349]} />
      <mesh geometry={nodes.Plane007.geometry} material={materials['rc-metallic']} position={[-4.237, 1.689, -7.912]} rotation={[0, 0, -Math.PI / 2]} />
      <mesh geometry={nodes.Plane008.geometry} material={materials['rc-door']} position={[-0.07, 0.7, -5.811]} rotation={[-Math.PI / 2, 0, 0]} scale={[0.5, 1, 0.7]} />
    </group>
  )
}

useGLTF.preload('models/university.glb')
